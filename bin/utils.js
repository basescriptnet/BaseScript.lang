const fs = require('fs');
const BS = require(internalPaths.compiler);
let beautify = function (code) { return code };
if (globalThis.development) {
    beautify = require('js-beautify').js;
}
const path_applied = process.cwd();
const run_code = require('./run_code.js');
let ast_to_js = require(internalPaths.ast_to_js);
let writeFile = (path, fileName, content, extension = '.bs', silent = false, env) => {
    if (!fileName) {
        return console.warn('Filename cannot be empty');
    }
    try {
        // this is pretty fast. Max was 3ms for regular file
        var tmp = ast_to_js(content, pathJS(path).dir);

        if (tmp.result === void 0) {
            return;
        }
        silent || console.log('[File System]: Writing to: '+fileName+'.js');

        let includes = tmp.includes;
        let dirs = tmp.dirs;
        let contentJS = tmp.result;
        contentJS += '\n';
        fs.writeFileSync(
            `${(`${fileName}.js`).replace(/\\/g, '/')}`,
            (env ? '#!/usr/bin/env node\n' : '') +
            '// Autogenerated by BaseScript v' + require('../package.json').version+
            (includes ? '\n\n' + includes + '\n\n' : '\n\n') +
            '// Your code below this line\n\n'+
            beautify(dirs + '\n' + contentJS), 'utf8'
        );
        // # sourceMappingURL=${fileName}.bs.map\n` // add later
        // fs.writeFileSync(fileName+'.bs.map', content)
        return content;
    } catch (err) {
        console.log(err);
        return void console.error('[Error]: Can\'t compile. Unexpected input.')
    }
};

module.exports = {
    parse(dir, arg0 = '', path, watch = false, run = false, to = '', args = [], env = false) {
        //console.clear()
        let date = Date.now();
        if (!watch) {
            path = dir
            if (!/\.b(s|m)$/i.test(path)) {
                console.log(path)
                console.error(new Error('Provided file doesn\'t have .bs or .bm extension'));
                process.exit()
            }
        } else {
            path = path(dir).add(path)
        }
        let fileName = path.substr(0, path.length - 3); // .bs  or .bm
        if (to) {
            fileName = to.substr(0, to.length - 3);
        }
        let extension = path.substr(path.length - 3); // .bs or .bm

        try {
            let content = '';
            // ! text_to_ast is really time consuming
            // ! so we use it only when we need to parse a file
            if (!watch && fs.existsSync(path)) {
                //console.time('text_to_ast');
                content = BS(path, path, false);
                //console.timeEnd('text_to_ast');
            } else {
                if (!fs.existsSync(path))
                    path = `${path_applied}${watch ? '\\' + path : ''}`;
                //console.time('text_to_ast');
                content = BS(path, path, false);
                //console.timeEnd('text_to_ast');
            }
            if (content === void 0) {
                return;
            }
            if (content.extension == '.bm') {
                console.info('[Module Check]: Module status OK for "' + fileName + '.bm".');
                console.log('Process time: ' + (Date.now() - date) + 'ms');
                return;
            }

            if (run) {
                let tmp = ast_to_js(content.result, pathJS(path).dir);

                if (tmp.result && tmp.result.length === 0 || !tmp.result) return;
                let includes = tmp.includes;
                let dirs = tmp.dirs;
                let contentJS = beautify(tmp.result);
                let builtins = '';

                if (!tmp.builtins) {
                    builtins = fs.readFileSync(pathJS(__dirname).add(internalPaths.built_in_from_utils), 'utf8');
                }
                let final = builtins + dirs + includes + '\n' + contentJS;
                run_code(final, pathJS(path).dir, path.split('\\').pop());
                process.exit();
            }
            let wrote = writeFile(path, fileName, content.result, content.extension, run ? true : false, env);
            if (wrote !== void 0 || wrote !== false || wrote !== null) {
                if (!run) {
                    console.log('Compiled in ' + (Date.now() - date) + 'ms');
                }
            }
        } catch (err) {
            console.warn('Can\'t compile. Unexpected input.');
            console.warn(err);
        }
    },
    fromString(string) {
        try {
            let content = BS(string, '', true);
            //console.timeEnd('text_to_ast');
            if (content === void 0) {
                return;
            }

            let tmp = ast_to_js(content.result);

            if (tmp.result && tmp.result.length === 0 || !tmp.result) return;
            let includes = tmp.includes;
            let dirs = ''//tmp.dirs;
            let contentJS = beautify(tmp.result);
            let builtins = '';
            let final = builtins + dirs + includes + '\n' + contentJS;
            //run_code(final, pathJS(path).dir, path.split('\\').pop());
            return final
        } catch (err) {
            console.warn('Can\'t compile. Unexpected input.');
            console.warn(err);
        }
    }
}
